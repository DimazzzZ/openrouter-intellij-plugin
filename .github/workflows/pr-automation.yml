name: PR Automation

on:
  pull_request:
    types: [opened, synchronize, edited, ready_for_review, converted_to_draft]
  pull_request_target:
    types: [opened]

jobs:
  pr-labeler:
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request_target' || github.event.pull_request.head.repo.full_name == github.repository
    permissions:
      contents: read
      pull-requests: write
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        ref: ${{ github.event.pull_request.head.sha }}
    
    - name: Auto-label PR based on files changed
      uses: actions/github-script@v6
      with:
        script: |
          const { owner, repo, number } = context.issue;
          
          // Get the files changed in this PR
          const files = await github.rest.pulls.listFiles({
            owner,
            repo,
            pull_number: number,
          });
          
          const changedFiles = files.data.map(file => file.filename);
          const labels = new Set();
          
          // Define labeling rules based on file patterns
          const labelRules = {
            'documentation': [/README\.md/, /CHANGELOG\.md/, /\.md$/, /docs\//],
            'tests': [/test\//, /Test\.kt$/, /spec\.kt$/],
            'ci/cd': [/\.github\//, /build\.gradle/, /gradle\.properties/],
            'ui': [/settings\//, /toolwindow\//, /statusbar\//, /ui\//],
            'core': [/services\//, /proxy\//, /aiassistant\//],
            'integration': [/integration\//, /aiassistant\//],
            'configuration': [/config\//, /detekt\.yml/, /gradle\.properties/],
            'resources': [/resources\//, /icons\//, /META-INF\//],
            'dependencies': [/build\.gradle/, /gradle\.properties/]
          };
          
          // Check each file against labeling rules
          for (const file of changedFiles) {
            for (const [label, patterns] of Object.entries(labelRules)) {
              if (patterns.some(pattern => pattern.test(file))) {
                labels.add(label);
              }
            }
          }
          
          // Add size-based labels
          const additions = files.data.reduce((sum, file) => sum + file.additions, 0);
          const deletions = files.data.reduce((sum, file) => sum + file.deletions, 0);
          const totalChanges = additions + deletions;
          
          if (totalChanges > 1000) {
            labels.add('size/XL');
          } else if (totalChanges > 500) {
            labels.add('size/L');
          } else if (totalChanges > 100) {
            labels.add('size/M');
          } else if (totalChanges > 10) {
            labels.add('size/S');
          } else {
            labels.add('size/XS');
          }
          
          // Add labels to PR
          if (labels.size > 0) {
            await github.rest.issues.addLabels({
              owner,
              repo,
              issue_number: number,
              labels: Array.from(labels)
            });
            
            console.log(`Added labels: ${Array.from(labels).join(', ')}`);
          }

  conditional-ci:
    runs-on: ubuntu-latest
    outputs:
      run-full-ci: ${{ steps.check-conditions.outputs.run-full-ci }}
      run-integration-tests: ${{ steps.check-conditions.outputs.run-integration-tests }}
      run-performance-tests: ${{ steps.check-conditions.outputs.run-performance-tests }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - name: Check CI conditions
      id: check-conditions
      run: |
        # Default values
        RUN_FULL_CI="false"
        RUN_INTEGRATION_TESTS="false"
        RUN_PERFORMANCE_TESTS="false"
        
        # Check if PR is ready for review (not draft)
        if [ "${{ github.event.pull_request.draft }}" = "false" ]; then
          RUN_FULL_CI="true"
        fi
        
        # Check for specific labels that should trigger extended testing
        PR_LABELS="${{ join(github.event.pull_request.labels.*.name, ' ') }}"
        
        if [[ "$PR_LABELS" =~ "integration" ]] || [[ "$PR_LABELS" =~ "core" ]]; then
          RUN_INTEGRATION_TESTS="true"
        fi
        
        if [[ "$PR_LABELS" =~ "performance" ]] || [[ "$PR_LABELS" =~ "size/XL" ]]; then
          RUN_PERFORMANCE_TESTS="true"
        fi
        
        # Check changed files for critical components
        git fetch origin ${{ github.event.pull_request.base.ref }}
        CHANGED_FILES=$(git diff --name-only origin/${{ github.event.pull_request.base.ref }}...HEAD)
        
        if echo "$CHANGED_FILES" | grep -E "(proxy/|aiassistant/|services/)"; then
          RUN_INTEGRATION_TESTS="true"
        fi
        
        if echo "$CHANGED_FILES" | grep -E "(build\.gradle|gradle\.properties)"; then
          RUN_FULL_CI="true"
          RUN_INTEGRATION_TESTS="true"
        fi
        
        echo "run-full-ci=$RUN_FULL_CI" >> $GITHUB_OUTPUT
        echo "run-integration-tests=$RUN_INTEGRATION_TESTS" >> $GITHUB_OUTPUT
        echo "run-performance-tests=$RUN_PERFORMANCE_TESTS" >> $GITHUB_OUTPUT
        
        echo "CI Conditions:"
        echo "- Full CI: $RUN_FULL_CI"
        echo "- Integration Tests: $RUN_INTEGRATION_TESTS"
        echo "- Performance Tests: $RUN_PERFORMANCE_TESTS"

  pr-validation:
    needs: conditional-ci
    runs-on: ubuntu-latest
    if: needs.conditional-ci.outputs.run-full-ci == 'true'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Java JDK
      uses: actions/setup-java@v4
      with:
        distribution: 'temurin'
        java-version: '17'
    
    - name: Setup Gradle
      uses: gradle/gradle-build-action@v2
      with:
        gradle-version: '8.2.1'
    
    - name: Cache IntelliJ dependencies
      uses: actions/cache@v3
      with:
        path: |
          ~/.gradle/caches/modules-2/files-2.1/com.jetbrains.intellij.idea
          ~/.gradle/caches/modules-2/files-2.1/com.jetbrains
        key: ${{ runner.os }}-intellij-${{ hashFiles('build.gradle.kts') }}
        restore-keys: |
          ${{ runner.os }}-intellij-
    
    - name: Build plugin
      run: ./gradlew build -x test -x detekt
    
    - name: Run unit tests
      run: ./gradlew test
    
    - name: Run Detekt analysis
      run: ./gradlew detekt
    
    - name: Comment PR with validation results
      uses: actions/github-script@v6
      if: always()
      with:
        script: |
          const { owner, repo, number } = context.issue;
          
          // Check if validation passed
          const conclusion = '${{ job.status }}' === 'success' ? '‚úÖ Passed' : '‚ùå Failed';
          const emoji = '${{ job.status }}' === 'success' ? 'üéâ' : '‚ö†Ô∏è';
          
          const comment = \`\${emoji} **PR Validation \${conclusion}**
          
          - Build: \${conclusion === '‚úÖ Passed' ? '‚úÖ' : '‚ùå'}
          - Unit Tests: \${conclusion === '‚úÖ Passed' ? '‚úÖ' : '‚ùå'}
          - Code Quality (Detekt): \${conclusion === '‚úÖ Passed' ? '‚úÖ' : '‚ùå'}
          
          \${conclusion === '‚ùå Failed' ? 'Please check the workflow logs for details.' : 'All checks passed! üöÄ'}\`;
          
          await github.rest.issues.createComment({
            owner,
            repo,
            issue_number: number,
            body: comment
          });

  conventional-commits-check:
    runs-on: ubuntu-latest
    if: github.event.action == 'opened' || github.event.action == 'synchronize'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - name: Check conventional commits
      run: |
        # Get commit messages since base branch
        git fetch origin ${{ github.event.pull_request.base.ref }}
        COMMITS=$(git log --pretty=format:"%s" origin/${{ github.event.pull_request.base.ref }}...HEAD)
        
        # Check if commits follow conventional format
        CONVENTIONAL_PATTERN="^(feat|fix|docs|style|refactor|perf|test|chore|ci)(\(.+\))?: .+"
        NON_CONVENTIONAL=()
        
        while IFS= read -r commit; do
          if [[ ! "$commit" =~ $CONVENTIONAL_PATTERN ]]; then
            NON_CONVENTIONAL+=("$commit")
          fi
        done <<< "$COMMITS"
        
        if [ ${#NON_CONVENTIONAL[@]} -gt 0 ]; then
          echo "‚ö†Ô∏è Non-conventional commit messages found:"
          printf '%s\n' "${NON_CONVENTIONAL[@]}"
          echo ""
          echo "Please follow conventional commit format:"
          echo "  feat: add new feature"
          echo "  fix: fix bug"
          echo "  docs: update documentation"
          echo "  style: formatting changes"
          echo "  refactor: code refactoring"
          echo "  perf: performance improvements"
          echo "  test: add tests"
          echo "  chore: maintenance tasks"
          echo "  ci: CI/CD changes"
        else
          echo "‚úÖ All commits follow conventional format"
        fi
