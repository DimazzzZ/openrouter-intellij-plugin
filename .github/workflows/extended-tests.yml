name: Extended Tests

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
    types: [ opened, synchronize, ready_for_review ]
  schedule:
    - cron: '0 2 * * 0'  # Weekly on Sunday at 2 AM UTC

jobs:
  integration-tests:
    runs-on: ubuntu-latest
    if: github.event.pull_request.draft == false
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Java JDK
      uses: actions/setup-java@v4
      with:
        distribution: 'temurin'
        java-version: '17'
    
    - name: Setup Gradle
      uses: gradle/gradle-build-action@v2
      with:
        gradle-version: '8.2.1'
    
    - name: Cache IntelliJ dependencies
      uses: actions/cache@v3
      with:
        path: |
          ~/.gradle/caches/modules-2/files-2.1/com.jetbrains.intellij.idea
          ~/.gradle/caches/modules-2/files-2.1/com.jetbrains
        key: ${{ runner.os }}-intellij-${{ hashFiles('build.gradle.kts') }}
        restore-keys: |
          ${{ runner.os }}-intellij-
    
    - name: Build plugin
      run: ./gradlew buildPlugin
    
    - name: Run integration tests
      run: ./gradlew integrationTest
      env:
        OPENROUTER_TEST_API_KEY: ${{ secrets.OPENROUTER_TEST_API_KEY }}
    
    - name: Upload integration test results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: integration-test-results
        path: build/reports/tests/integrationTest/

  plugin-verification:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        intellij-version: ['2023.2.5', '2023.3', '2024.1']
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Java JDK
      uses: actions/setup-java@v4
      with:
        distribution: 'temurin'
        java-version: '17'
    
    - name: Setup Gradle
      uses: gradle/gradle-build-action@v2
      with:
        gradle-version: '8.2.1'
    
    - name: Cache IntelliJ dependencies
      uses: actions/cache@v3
      with:
        path: |
          ~/.gradle/caches/modules-2/files-2.1/com.jetbrains.intellij.idea
          ~/.gradle/caches/modules-2/files-2.1/com.jetbrains
        key: ${{ runner.os }}-intellij-${{ matrix.intellij-version }}-${{ hashFiles('build.gradle.kts') }}
        restore-keys: |
          ${{ runner.os }}-intellij-
    
    - name: Build plugin for IntelliJ ${{ matrix.intellij-version }}
      run: |
        ./gradlew buildPlugin -PplatformVersion=${{ matrix.intellij-version }}
    
    - name: Run Plugin Verifier
      run: |
        ./gradlew runPluginVerifier -PplatformVersion=${{ matrix.intellij-version }}
    
    - name: Upload Plugin Verifier results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: plugin-verifier-${{ matrix.intellij-version }}
        path: build/reports/pluginVerifier/

  performance-tests:
    runs-on: ubuntu-latest
    if: github.event_name == 'schedule' || contains(github.event.pull_request.labels.*.name, 'performance')
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Java JDK
      uses: actions/setup-java@v4
      with:
        distribution: 'temurin'
        java-version: '17'
    
    - name: Setup Gradle
      uses: gradle/gradle-build-action@v2
      with:
        gradle-version: '8.2.1'
    
    - name: Build plugin
      run: ./gradlew buildPlugin
    
    - name: Run performance-sensitive tests
      run: |
        ./gradlew test --tests="*Performance*" --tests="*Benchmark*"
      
    - name: Monitor plugin size
      run: |
        PLUGIN_SIZE=$(stat -c%s "build/distributions/"*.zip | head -n1)
        echo "Plugin size: $PLUGIN_SIZE bytes"
        echo "PLUGIN_SIZE=$PLUGIN_SIZE" >> $GITHUB_ENV
        
        # Fail if plugin size exceeds 10MB (reasonable limit)
        if [ $PLUGIN_SIZE -gt 10485760 ]; then
          echo "Plugin size ($PLUGIN_SIZE bytes) exceeds 10MB limit"
          exit 1
        fi
    
    - name: Comment PR with size info
      uses: actions/github-script@v6
      if: github.event_name == 'pull_request'
      with:
        script: |
          const size = process.env.PLUGIN_SIZE;
          const sizeInMB = (size / (1024 * 1024)).toFixed(2);
          
          await github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: `ðŸ“Š **Plugin Size Report**\n\nCurrent plugin size: ${sizeInMB} MB (${size} bytes)`
          });
